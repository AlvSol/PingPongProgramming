PROBLEM 1 solution

private boolean checkDimensions(CLIQUEUnit other, int e) {
	for(int i = 0, j = 0; i<e; i++, j+=2){
		
		if(dims[i] != other.dims[i] || bounds[j] != other.bounds[j] || bounds[j+1] != other.bounds[j+1]) {
			return false;
		}
		
	}
	
	return true;
}

------------------------------

PROBLEM 2 SOLUTION

Because double was a primitive type it couldn't return null, but Double is a class so it can.

public Double computeMean() {
	return (point.size() == 1) ? points.get(1) : null;
}

---------------------------------

PROBLEM 3 SOLUTION

protected PreDeConModel computeLocalModel(DoubleDBIList neighbors, ...) {

	final int referenceSetSize = neighbors.size();
	.....
	if(referenceSetSize <= 0) {
		LOG.warning("Empty reference set - should at Ã±east include the query point");
		return new PreDeConModel(Integer.MAX_VALUE, DBIUtil.EMPTYDBIDS);
	}
	....
	for(int d=0; d < dim; d++) {
		s[d] /= referenceSetSize;
		mvVar.put(s[d]);
	}
	
	.....
}


------------------

PROBLEM 4 SOLUTION

public String getStrippedSubstring() {
	int sstart = start, ssend = end;
	while(sstart < ssend) {
		if(sstart >= input.length()) {
			break;
		}
		char c = input.chatAt(sstart);
		if(c!=' '||c!='\n'||c!='\r'||c!='\t') {
			break;
		}
		++sstart;
	}
	
	....
}


-----------------------

PROBLEM 5 SOLUTION

public statis final ByteSequence prefixEndOf(ByteSequence prefix) {

	byte[] endKey = prefix.getBytes().clone();
	
	for(int i= endKey.length -1; i >=0; i--) {
	
		//0x7f = 127
		if(endKey[i] < 0x7f) {
			endKey[i] = (byte) (endKey[i] + 1);
			return ByteSequence.from(Arrays.copyOf(endKey, i+1));
		}
	}

	return ByteSequence.from(NO_PREFIX_END);
}

--------------------------

PROBLEM 6 SOLUTION

private static byte char64(char x) {
	if((int) x < 0 || (int) x >= index_64.length)
		return -1;
		
	return index_64[(int) x];
}


------------------------

PROBLEM 7 SOLUTION

public void putToCache(PutRecordsRequest putRecordsRequest) {
	....
	
	if(dataTmpFile != null && !dataTmpFile.exists()) {
		try {
			dataTmpFile.createNewFile();
		}
		catch (IOExxception e) {
			LOGGER.error("Failed to create cache tmp file, return .", e);
			return ;
		}
	}
	....
}

----------------------

PROBLEM 8 SOLUTION

private void shiftRightDestructive(int wordShifts, int bitShiftsInWord, boolean roundUp) {

	if(wordShifts == 0 || bitShiftsInWord == 0) {
		return ;
	}
	
	assert(wordShifts >= 0);
	assert(bitShiftsInWord >= 0);
	assert(bitShiftsInWord < 32);
	if(wordShifts >= 4) {
		zeroClear();
		return ;
	}
	
	final int shiftRestore = 32 - bitShiftsInWord;
	
	final boolean norestore = bitShiftsInWord == 0;
	final int roundCarryNoRestoreMask = 1 << 31;
	final int roundCarryMask = (1 << (bitShiftsInWord - 1));
	
	.....
}

--------------------

PROBLEM 9 SOLUTION

public void logSargResult(int stripeIx, boolean[] rgsToRead) {

	.....
	long val;
	int ix;
	for(int i = 0, valOffset = 0; i < elements && valOffset <=rgsToRead.length;++i, valOffset+=64){
		val=0;
		for(int j = 0;j < 64; ++j){
			ix = valOffset + j;
			if( rgsToRead.length <= ix ) break;
			if( !rgsToRead[ix]) continue;
			val = val | (1 << j);
		}
		if( rgsToRead.length <= ix ) break;
		.....
	}
	....	
}

---------------------------

PROBLEM 10 SOLUTION

The bug found is that the value 0x0822 is bigger than 1024, for that reason the variable "i" will never reach that value.
While 0x03ff is 1023 so this value will be reached.

public void testSignSHA256CompleteEvenHeigh2() {
	....
	int height = 10;
	...
	for(int i = 0; i < (1 << height); i++) {
		byte[] signature = xmss.sign(new byte[1024]);
		switch(i) {
			case 0x005b:
				assertEquals(signature[0], Hex.toHexString(signature));
				break;
			case 0x03ff:
				assertEquals(signature[1], Hex.toHexString(signature));
				break;
		
			.....
		}
	}
}

-------------------------

EXTRA PROBLEM SOLUTION

We have seen that the difference between == and 'Objects.equals' can return different results, and because
we know 'Objects.equals' is true when two objects have the same content we decided to go with this solution.

@Override
public boolean equals(Object o) {

	.....
	CheckpointStating that = (CheckpointStatistics) o;
	return Objects.equals(id,that.id) && 
	Objects.equals(id,that.id)
	&& Objects.equals(savepoint,that.savepoint)
	&& Objects.equals(triggerTimestamp,that.triggerTimestamp)
	&& Objects.equals(latestAckTimestamp,that.latestAckTimestamp)
	&& Objects.equals(stateSize,that.stateSize)
	&& Objects.equals(duration,that.duration)
	&& Objects.equals(alignmentBuffered,that.alignmentBuffered)
	&& Objects.equals(processedData,that.processedData)
	&& Objects.equals(persistedData,that.persistedData)
	&& Objects.equals(numSubtasks,that.numSubtasks)
	&& Objects.equals(numAckSubtasks,that.numAckSubtasks)
	&& Objects.equals(status,that.status)
	&& Objects.equals(checkpointType,that.checkpointType)
	&& Objects.equals(checkpointStatisticsPerTask,that.checkpointStatisticsPerTask);
}