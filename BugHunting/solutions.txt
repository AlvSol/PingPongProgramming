PROBLEM 1 solution

private boolean checkDimensions(CLIQUEUnit other, int e) {
	for(int i = 0, j = 0; i<e; i++, j+=2){
		
		if(dims[i] != other.dims[i] || bounds[j] != other.bounds[j] || bounds[j+1] != other.bounds[j+1]) {
			return false;
		}
		
	}
	
	return true;
}

------------------------------

PROBLEM 2 SOLUTION

Because double was a primitive type it couldn't return null, but Double is a class so it can.

public Double computeMean() {
	return (point.size() == 1) ? points.get(1) : null;
}

---------------------------------

PROBLEM 3 SOLUTION

protected PreDeConModel computeLocalModel(DoubleDBIList neighbors, ...) {

	final int referenceSetSize = neighbors.size();
	.....
	if(referenceSetSize <= 0) {
		LOG.warning("Empty reference set - should at Ã±east include the query point");
		return new PreDeConModel(Integer.MAX_VALUE, DBIUtil.EMPTYDBIDS);
	}
	....
	for(int d=0; d < dim; d++) {
		s[d] /= referenceSetSize;
		mvVar.put(s[d]);
	}
	
	.....
}


------------------

PROBLEM 4 SOLUTION

public String getStrippedSubstring() {
	int sstart = start, ssend = end;
	while(sstart < ssend) {
		if(sstart >= input.length()) {
			break;
		}
		char c = input.chatAt(sstart);
		if(c!=' '||c!='\n'||c!='\r'||c!='\t') {
			break;
		}
		++sstart;
	}
	
	....
}


-----------------------

PROBLEM 5 SOLUTION

public statis final ByteSequence prefixEndOf(ByteSequence prefix) {

	byte[] endKey = prefix.getBytes().clone();
	
	for(int i= endKey.length -1; i >=0; i--) {
	
		//0x7f = 127
		if(endKey[i] < 0x7f) {
			endKey[i] = (byte) (endKey[i] + 1);
			return ByteSequence.from(Arrays.copyOf(endKey, i+1));
		}
	}

	return ByteSequence.from(NO_PREFIX_END);
}

--------------------------

PROBLEM 6 SOLUTION

private static byte char64(char x) {
	if((int) x < 0 || (int) x >= index_64.length)
		return -1;
		
	return index_64[(int) x];
}


------------------------

PROBLEM 7 SOLUTION

public void putToCache(PutRecordsRequest putRecordsRequest) {
	....
	
	if(dataTmpFile != null && !dataTmpFile.exists()) {
		try {
			dataTmpFile.createNewFile();
		}
		catch (IOExxception e) {
			LOGGER.error("Failed to create cache tmp file, return .", e);
			return ;
		}
	}
	....
}
